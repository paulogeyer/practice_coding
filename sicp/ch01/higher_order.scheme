(define phi (/ (+ 1 (sqrt 5)) 2))

(define (cube x)
  (* x x x))

(define (sum-integers a b)
  (if (> a b)
      0
      (+ a (sum-integers (+ a 1) b))))

(define (sum-cubes a b)
  (if (> a b)
      0
      (+ (cube a) (sum-cubes (+ a 1) b))))

(define (pi-sum a b)
  (if (> a b)
      0
      (+ (/ 1.0 (* a (+ a 2))) (pi-sum (+ a 4) b))))

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
	 (sum term (next a) next b))))

(define (inc n) (+ n 1))

(define (sum-cubes a b)
  (sum cube a inc b))

(define (identity x) x)

(define (sum-integers a b)
  (sum identity a inc b))

(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))

(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))

(define (integral-simpsons f a b n)
  (define h (/ (- b a) n))
  (define (add-2h x) (+ x h h))
  (* (+ (f a)
	(* 2 (sum f a add-2h b))
	(* 4 (sum f (+ a h) add-2h b))
	(f b))
     (/ h 3.0)))

(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
	result
	(iter (next a) (+ result (term a)))))
  (iter a 0))

(define (product term a next b)
  (define (iter a result)
    (if (> a b)
	result
	(iter (next a) (* result (term a)))))
  (iter a 1))

(define (factorial n)
  (product identity 1 inc n))

;; recursive
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
		(accumulate combiner null-value term (next a) next b))))

;; iterative
(define (accumulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
	result
	(iter (next a) (combiner result (term a)))))
  (iter a null-value))

(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (product term a next b)
  (accumulate * 1 term a next b))

(define (filter-accumulate combiner null-value term a next b pred)
  (if (> a b)
      null-value
      (combiner (if (pred a) (term a) 0)
		(filter-accumulate combiner
				   null-value
				   term
				   (next a)
				   next
				   b
				   pred))))

;; sum all primes from a to b
(define (f)
  (filter-accumulate +
		     0
		     identity
		     2
		     inc
		     17
		     prime?))

(define (f x y)
  (define (gcd a b)
    (if (= b 0)
	a
	(gcd b (remainder a b))))
  (define (relatively-prime? n)
    (= (gcd n y) 1))
    
  (filter-accumulate *
		     1
		     identity
		     x
		     inc
		     y
		     relatively-prime?))


;; ex 1.34
;; pg 66
(define (f g)
  (g 2))

(define (search f neg-point pos-point)
  (let ((midpoint (average neg-point pos-point)))
    (if (close-enough? neg-point pos-point)
	midpoint
	(let ((test-value (f midpoint)))
	  (cond ((positive? test-value)
		 (search f neg-point midpoint))
		((negative? test-value)
		 (search f midpoint pos-point))
		(else midpoint))))))

(define (average a b)
  (/ (+ a b) 2))

(define (close-enough? x y)
  (< (abs (- x y)) 0.001))

(define (half-interval-method f a b)
  (let ((a-value (f a))
	(b-value (f b)))
    (cond ((and (negative? a-value) (positive? b-value))
	   (search f a b))
	  ((and (negative? b-value) (positive? a-value))
	   (search f b a))
	  (else
	   (error "Values are not of opposite sign" a b)))))

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
	  next
	  (try next))))
  (try first-guess))

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (display guess) (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
	  next
	  (try next))))
  (try first-guess))

(define (sqrt x)
  (fixed-point (lambda (y) (/ x y))
	       1.0))

(define (sqrt x)
  (fixed-point (lambda (y) (average y (/ x y)))
	       1.0))

(define (f)
  (fixed-point (lambda (x) (+ 1 (/ 1 x)))
	       1.0))

(define (f)
  (fixed-point (lambda (x) (/ (log 1000) (log x)))
	       2.0))

(define (f)
  (fixed-point (lambda (x) (average x (/ (log 1000) (log x))))
	       2.0))

(define (cont-frac n d k)
  (if (< k 1)
      (/ (n k) (d k))
      (/ (n k) (+ (d k) (cont-frac n d (- k 1))))))

(define (cont-frac n d k)
  (define (iter k v)
    (if (< k 1)
	(/ (n k) (+ v (d k)))
	(iter (- k 1) (/ (n k) (+ (d k) v)))))
  (iter (- k 1) (/ (n k) (d k))))

(cont-frac (lambda (i) 1.0)
	   (lambda (i) 1.0)
	   100)

(define (e k)
  (+ (cont-frac (lambda (i) 1.0)
		(lambda (i) (cond ((= (remainder (+ 2 i) 3) 0)
				   (* 2 (/ (+ 2 i) 3)))
				  (else 1)))
		k)
     2))

(define (tan-cf x k)
  (cont-frac (lambda (i) (if (= i 0) x (- (square x))))
	     (lambda (i) (+ 1.0 (* i 2)))
	     k))

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
	       1.0))

(define (cube-root x)
  (fixed-point (average-damp (lambda (y) (/ x (square y))))
	       1.0))

(define dx 0.00001)

(define (deriv g)
  (lambda (x)
    (/ (- (g (+ x dx)) (g x))
       dx)))

(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))

(define (newtons-method  g guess)
  (fixed-point (newton-transform g) guess))

(define (sqrt x)
  (newtons-method (lambda (y) (- (square y) x))
		  1.0))

(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess))

(define (sqrt x)
  (fixed-point-of-transform (lambda (y) (/ x y))
			    average-damp
			    1.0))

(define (sqrt x)
  (fixed-point-of-transform (lambda (y) (- (square y) x))
			    newton-transform
			    1.0))

;; ex 1.40
(define (cubic-formula a b c)
  (lambda (x) (+ (* x x x) (* x x a) (* x b) c)))

(define (solve-cubic a b c)
  (newtons-method (lambda (x) (+ (* x x x) (* x x a) (* x b) c))
		  1.0))

;; ex 1.41
(define (double f)
  (lambda (x) (f (f x))))

(((double (double double)) inc) 5) ;; 21
(((double double) inc) 5) ;; 9
((double inc) 5) ;; 7

;; ex 1.42
(define (compose f g)
  (lambda (x) (f (g x))))
